# ui/models.py
from PyQt5.QtCore import QAbstractTableModel, Qt, QVariant
from PyQt5.QtCore import QSortFilterProxyModel, Qt, QRegExp

class DataFrameModel(QAbstractTableModel):
    """Read-only Qt model backed by a pandas DataFrame."""
    def __init__(self, df):
        super().__init__()
        self._df = df

    def rowCount(self, parent=None):
        return 0 if self._df is None else int(self._df.shape[0])

    def columnCount(self, parent=None):
        return 0 if self._df is None else int(self._df.shape[1])

    def data(self, index, role=Qt.DisplayRole):
        if role != Qt.DisplayRole or not index.isValid():
            return QVariant()
        val = self._df.iat[index.row(), index.column()]
        return "" if val is None else str(val)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return QVariant()
        if self._df is None:
            return QVariant()
        if orientation == Qt.Horizontal:
            return str(self._df.columns[section])
        else:
            return section + 1


class ColumnFilterProxyModel(QSortFilterProxyModel):
    """
    Supports per-column text filters. Each filter is a plain substring (case-insensitive)
    or a simple regex (if it begins with 're:').
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self._filters = {}  # col_index -> (pattern:str, is_regex:bool)
        self.setFilterCaseSensitivity(Qt.CaseInsensitive)

    def setColumnFilter(self, column, pattern):
        if pattern is None or pattern == "":
            self._filters.pop(column, None)
        else:
            is_regex = pattern.startswith("re:")
            patt = pattern[3:] if is_regex else pattern
            self._filters[column] = (patt, is_regex)
        self.invalidateFilter()

    def clearColumnFilter(self, column):
        self._filters.pop(column, None)
        self.invalidateFilter()

    def clearAllFilters(self):
        self._filters.clear()
        self.invalidateFilter()

    def filterAcceptsRow(self, source_row, source_parent):
        # All active column filters must match
        src = self.sourceModel()
        if src is None:
            return True
        for col, (patt, is_regex) in self._filters.items():
            idx = src.index(source_row, col, source_parent)
            val = "" if not idx.isValid() else str(src.data(idx))
            if is_regex:
                rx = QRegExp(patt, Qt.CaseInsensitive)
                if rx.indexIn(val) < 0:
                    return False
            else:
                if patt.lower() not in val.lower():
                    return False
        return True

